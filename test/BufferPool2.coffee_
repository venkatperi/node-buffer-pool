assert = require( 'assert' )
BufferPool = require( '..' )
Q = require 'q'

size = 16 * 1024 * 1024
pool = undefined

maxItOut = ( cb ) ->
  bufs = []
  next = ->
    pool.getBuffer ( buf ) ->
      bufs.push buf
      return process.nextTick next if (pool.count < pool.capacity)
      cb( buf, bufs )

  next( )

describe 'BufferPool', ->

  beforeEach ->
    pool = new BufferPool( )

  it 'has defaults', ->
    assert pool.size != undefined
    assert pool.capacity != undefined

  it 'should not allocate buffers initially', ->
    assert pool.numAvailable is 0
    assert pool.numUsed is 0
    assert pool.count is 0

  it "can't change size", ->
    x = -> pool.size = 100
    assert.throws x, Error

  it "can't reduce capacity below allocated", ( done ) ->
    maxItOut ->
      x = -> pool.capacity = pool.capacity - 1
      assert.throws x, Error
      done( )

  it 'has stats', ->
    assert pool.stats isnt undefined

  describe 'dummy buffer', ->
    it 'allocate', ( done ) ->
      pool.getBuffer size : 4000, ( buf ) ->
        assert buf.dummy is true
        assert buf.length is 4000
        assert pool.numAvailable is 0
        assert pool.numUsed is 0
        assert pool.count is 0
        assert pool.stats.getBuffer.count is 1
        assert pool.stats.alloc_dummy.count is 1
        done( )

    it 'free', ( done ) ->
      pool.getBuffer size : 4000, ( buf ) ->
        verify = ->
          assert pool.stats.buffer_use is undefined
          done( )

        release = ->
          buf.unref( )
          setTimeout verify, 100

        setTimeout release, 100

  describe 'pooled buffer', ->
    it 'default size is pool size', ( done ) ->
      pool.getBuffer ( buf ) ->
        assert buf.length is pool.size
        done( )

    it 'allocate', ( done ) ->
      pool.getBuffer ( buf ) ->
        assert buf.dummy is false
        assert pool.numAvailable is 0
        assert pool.numUsed is 1
        assert pool.count is 1
        assert pool.stats.getBuffer.count is 1
        assert pool.stats.alloc_pool.count is 1
        done( )

    it 'emits event if new buffer is allocated', ( done ) ->
      pool.on 'allocate', -> done( )
      pool.getBuffer ->

    it 'release', ( done ) ->
      pool.getBuffer ( buf ) ->
        verify = ->
          assert pool.numAvailable is 1
          assert pool.numUsed is 0
          assert pool.count is 1
          done( )

        release = ->
          buf.unref( )
          setTimeout verify, 100

        setTimeout release, 100

    it 'emit event when buffer is freed', ( done ) ->
      pool.getBuffer ( buf ) ->
        assert pool.stats.buffer_use.count is 1
        pool.once 'free', ->
          assert pool.stats.buffer_free.count is 1
          done( )

        release = -> buf.unref( )
        setTimeout release, 100

    it 'returns most recently released buffer', ( done ) ->
      maxItOut ( buf ) ->
        pool.once 'free', ->
          assert pool.stats.getBuffer.count is pool.capacity
          assert pool.stats.alloc_pool.count is pool.capacity
          assert pool.stats.alloc_pool.count is pool.capacity
          pool.getBuffer ( buf2 ) ->
            assert buf2.id is buf.id
            assert buf.lastUsed isnt undefined
            done( )

        buf.unref( )

    describe 'pool at capacity', ->

      it 'available arranged in ascending order of lastUsed', ( done ) ->
        count = 0
        pool.on 'free', ->
          if ++count is pool.capacity
            r = ( t, x ) =>
              assert x.lastUsed > t
              return x.lastUsed
            pool.available.reduce r, 0
            done( )

        maxItOut ( buf, bufs ) ->
          bufs.forEach ( b ) ->
            rel = -> b.unref( )
            setTimeout rel, 1000


      it 'getBuffer() should return null if timeout is 0', ( done ) ->
        pool.on 'error', done
        maxItOut ->
          pool.getBuffer timeout : 0, ( buf ) ->
            assert buf is null
            done( )

      it 'getBuffer() should return buffer if one is free within a specified timeout', ( done ) ->
        pool.on 'error', done
        maxItOut ( buf ) ->
          pool.getBuffer timeout : 500, ( buf2 ) ->
            assert buf2 isnt null
            done( )

          release = -> buf.unref( )
          setTimeout release, 200

      it 'getBuffer() should emit an error if no buffer is available within a specified timeout', ( done ) ->
        maxItOut ( buf ) ->
          pool.on 'error', -> done( )

          pool.getBuffer timeout : 200, -> done new Error "shouldn't get here!"

          release = -> buf.unref( )
          setTimeout release, 1000

